function [] = process_attune_v2(cruiseName, basepath)
%input basepath to
%Cruise\ with ExportedFCS and Summary

AttuneTable.cruiseName = cruiseName;
%fpath = [basepath '\ExportedFCS\'];
fpath = [basepath filesep 'FCS_backup_AR29' filesep];
outpath = [basepath filesep 'Summary' filesep];

%filelist = dir([fpath 'SFD*']);
%filelist = {filelist.name}';

Attune = load([outpath 'FCSfileinfo']);
filelist = Attune.FCSfileinfo.filelist;

% Creating the variables

temp = NaN(length(filelist),3);
SynCount = temp;
SynBiovol = temp;
temp = NaN(length(filelist),6);
EukCount = temp;
EukBiovol = temp;
QC_flowrate = NaN(length(filelist),1);

for count = 1:length(filelist)
    if ~rem(count,10)
        disp([num2str(count) ' of ' num2str(length(filelist))])
    end
    filename = [fpath filelist{count}];
    
    %reading in each FCS file with fca_readfcs
    [~,fcshdr,fcsdatscaled] =fca_readfcs(filename);
    t = find(fcsdatscaled(:,12)>500 & fcsdatscaled(:,3)>100);
    QC_flowrate(count) = (median(fcsdatscaled(t,3)./fcsdatscaled(t,12)));
        
    %Vector to indicate class of each event
    class = zeros(numel(fcsdatscaled(:,1)),1);
    
    %npar_eukX = 3; %SSC-A
    npar_eukX = 12; %SSC-H
    npar_eukY = 15; %BL1-H
    %defining the polygon gate for the Small Eukaryote Signal
    x_polygon = [10^1.5  10^1.5 10^6 10^6   10^5    10^4.3  10^3.7  10^2.5      10^1.5 ];
    y_polygon = [10^2.8  10^6 10^6 10^5.5 10^4.8  10^4.2  10^3.7  10^3        10^2.8 ];
    
    npar_synX = 3; %SSC-A
    npar_synY = 10; %GL1-A
    %defining the rectangular gate for the Synechecoccus Signal
    %SynXmin= 200; SynXmax= 10^4;
    SynXmin= 1; SynXmax= 10^3;
    SynYmin= 10^3; SynYmax= 10^5;
    
    x_rect = [SynXmin SynXmin SynXmax SynXmax SynXmin];
    y_rect = [SynYmin SynYmax SynYmax SynYmin SynYmin];
    
    %counting cells within the gates
    in_euk = inpolygon(fcsdatscaled(:,npar_eukX),fcsdatscaled(:,npar_eukY),x_polygon,y_polygon);
    in_syn = (inpolygon(fcsdatscaled(:,npar_synX),fcsdatscaled(:,npar_synY),x_rect,y_rect) & fcsdatscaled(:,11)<1e4 & fcsdatscaled(:,10)./fcsdatscaled(:,19) < 4 & fcsdatscaled(:,10)./fcsdatscaled(:,6) > 3.5);
    
    %defining euks and syn in the class
    class(in_euk) = 1;
    class(in_syn) = 2;
    
    temp = fcsdatscaled(:,3); %SSC-A
    temp(temp<0) = NaN;
    volume = 10.^(1.3.*log10(temp) - 2.9);
    
    save([outpath filesep 'class' filesep regexprep(filelist{count}, '.fcs', '')], 'class', 'volume')
    
    SynCount(count,1) = sum(in_syn);
    EukCount(count,1) = sum(in_euk);
    SynBiovol(count,1) = sum(volume(in_syn));
    EukBiovol(count,1) = nansum(volume(in_euk));  %%CHECK PROBLEM WHERE SOME SSC-A values are negative
    
    diam = (volume*3/4/pi).^(1/3)*2;
    ind = find(diam<=2 & class==2);
    SynCount(count,2) = length(ind);
    SynBiovol(count,2) = sum(volume(ind));
    ind = find(diam>2 & diam<=10 & class==2);
    SynCount(count,3) = length(ind);
    SynBiovol(count,3) = sum(volume(ind));

    ind = find(diam<=2 & class==1);
    EukCount(count,2) = length(ind);
    EukBiovol(count,2) = sum(volume(ind));
    ind = find(diam>2 & diam<=10 & class==1);
    EukCount(count,3) = length(ind);
    EukBiovol(count,3) = sum(volume(ind));
    ind = find(diam>10 & diam<=20 & class==1);
    EukCount(count,4) = length(ind);
    EukBiovol(count,4) = sum(volume(ind));
    ind = find(diam>20 & diam<=50 & class==1);
    EukCount(count,5) = length(ind);
    EukBiovol(count,5) = sum(volume(ind));
    ind = find(diam>50 & class==1);
    EukCount(count,6) = length(ind);
    EukBiovol(count,6) = sum(volume(ind));
    
    if 0
        figure(1), clf
        ax1 = subplot(2,3,1);
        ax2 = subplot(2,3,2);
        ax3 = subplot(2,3,3);
        ax4 = subplot(2,3,4);
        ax5 = subplot(2,3,5);
        ax6 = subplot(2,3,6);
        mylim1 = [1e1 1e6 1e1 1e6];
        make_plot(ax1,12,15,mylim1)
        plot(ax1,x_polygon, y_polygon, 'g.-')
        make_plot(ax2,3,10,mylim1)
        plot(ax2,x_rect,y_rect, 'r.-')
        make_plot(ax3,19,10,mylim1)
        axes(ax3)
        line(xlim,xlim*4)
        %make_plot(ax4,6,10,mylim1)
        make_plot(ax4,11,19,mylim1) 
        make_plot(ax5,15,19,mylim1) 
        make_plot(ax6,6,10,mylim1)
        axes(ax6)
        line(xlim, xlim*3.5)
        pause(.01)
    end
end

    function make_plot(ax, nparX, nparY, mylim)
        loglog(ax,fcsdatscaled(:,nparX), fcsdatscaled(:,nparY), '.', 'markersize', 1)
        ylabel(ax,fcshdr.par(nparY).name)
        xlabel(ax,fcshdr.par(nparX).name)
        axis(ax,'square')
        hold(ax, 'on')
        loglog(ax,fcsdatscaled(class==1,nparX), fcsdatscaled(class==1,nparY), '.g', 'markersize', 1)
        loglog(ax,fcsdatscaled(class==2,nparX), fcsdatscaled(class==2,nparY), 'r*', 'markersize', 1)
        axis(ax,mylim) 
    end

AttuneTable.readme = ['This was generated by process_attune_v2.m which takes in a'...
    'directory of FCS files that should be called Exported FCS and outputs a'...
    'Table called AttuneTable.']

AttuneTable = table(Attune.FCSfileinfo.filelist, datetime(Attune.FCSfileinfo.matdate_start, 'ConvertFrom', 'datenum'), datetime(Attune.FCSfileinfo.matdate_stop, 'ConvertFrom', 'datenum'), Attune.FCSfileinfo.vol_analyzed/1e6, 'VariableNames', {'Filename' 'StartDate' 'StopDate' 'VolAnalyzed_ml'});
AttuneTable = [AttuneTable array2table(SynCount, 'VariableNames', {'SynCountTotal' 'SynCountlt2' 'SynCount2_10'})];
AttuneTable = [AttuneTable array2table(EukCount, 'VariableNames', {'EukCountTotal' 'EukCountlt2' 'EukCount2_10' 'EukCount10_20' 'EukCount20_50' 'EukCountgt50'})];
AttuneTable = [AttuneTable array2table(SynBiovol, 'VariableNames', {'SynBiovolTotal' 'SynBiovollt2' 'SynBiovol2_10'})];
AttuneTable = [AttuneTable array2table(EukBiovol, 'VariableNames', {'EukBiovolTotal' 'EukBiovollt2' 'EukBiovol2_10' 'EukBiovol10_20' 'EukBiovol20_50' 'EukBiovolgt50'})];
AttuneTable.QC_flowrate = QC_flowrate;

AttuneTable = sortrows(AttuneTable, 'StartDate');
 
save([basepath '\Summary\AttuneTable'],'AttuneTable')
disp(['Result file saved:'])
disp([basepath '\Summary\AttuneTable'])

end 